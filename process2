//今日23.10.7
////10.7日学习 C++友元 关键字：friend
////类有私人权限，在类外不能访问，但是如果我想访问的话，就可以利用友元。
////友元的作用：帮助外部的函数或者类来访问一个类私有权限的部分。
//#include <iostream>
//using namespace std;
//
//class building
//{
//	friend void test01();
//public:
//	building()
//	{
//		sittingRoom = "客厅";
//		Bedroom = "卧室";
//	}
//	string sittingRoom;//客厅，公共权限可以访问
//private:
//	string Bedroom;//卧室，私有权限
//};
//class GoodGay
//{
//public:
//	GoodGay()
//	{
//		build = new building;//构造函数在堆区创建一个区域存放building类，将地址返回给build
//	}
//
//	building * build;
//};
//
////1.全局函数做友元
////格式： 需要在类内最上端声明函数的名称，并带上关键字friend
//void test01()
//{
//	GoodGay gg;
//	cout << "test01此时访问的是：" << gg.build->sittingRoom << endl;//sittingroom是公共区域可以访问
//	cout << "test01此时访问的是：" << gg.build->Bedroom << endl;//私有权限不可访问
//	//加上友元的声明即可访问
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

////今日2.全局函数做友元
//#include <iostream>
//using namespace std;
//class building
//{
//	friend class GoodGay;
//public:
//	building();
//	string sittingRoom;
//private:
//	string bedRoom;
//};
//
//class GoodGay
//{
//public:
//		GoodGay();
//		void visit1();
//		void visit2();
//	    building* build;
//};
////类外可以声明类内的构造函数或者成员函数，两者的区别就是需要在函数前声明一个归属
//GoodGay::GoodGay()
//{
//	build = new building;//在堆区创建一个空间存放building
//}
//
//building::building()
//{
//	sittingRoom = "客厅";  
//	bedRoom = "卧室";
//}
//
//void GoodGay::visit1()
//{
//	cout << "visit1此时访问的是" << build->sittingRoom << endl;
//	cout << "visit1此时访问的是" << build->bedRoom << endl;
//
//}
//void GoodGay::visit2()
//{
//	cout << "visit2此时访问的是" << build->sittingRoom << endl;
//	cout << "visit2此时访问的是" << build->bedRoom << endl;
//
//}
//
////我想在GoodGay类内访问building类内的私有权限部分
////也就是利用GoodGay内的函数访问
//void test01()
//{
//	GoodGay gg;
//	gg.visit1();
//	gg.visit2();
//}
////当类做友元的时候，类内所有的函数都可以访问目标类内的私有权限区域。
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//今日3.成员函数做友元
//#include <iostream>
//using namespace std;
//class building;//*************【注意】*************
////当成员函数做友元的时候，一定要把友元的类写在被访问私有权限区域的类的前面
//// ，并且在前面声明被访问类的名称
//class GoodGay
//{
//public:
//	GoodGay();
//	void visit1();
//	void visit2();
//	building* build;
//};
//class building//*************【注意】*************
////当成员函数做友元的时候，一定要把友元的类写在被访问私有权限区域的类的前面
//// ，并且在前面声明被访问类的名称  
//{
//	friend void GoodGay::visit1();
//public:
//	building();
//	string sittingRoom;
//private:
//	string bedRoom;
//};
//
//GoodGay::GoodGay()
//{
//	build = new building;//在堆区创建一个空间存放building
//}
//
//building::building()
//{
//	sittingRoom = "客厅";
//	bedRoom = "卧室";
//}
//
//void GoodGay::visit1()
//{
//	cout << "visit1此时访问的是" << build->sittingRoom << endl;
//	cout << "visit1此时访问的是" << build->bedRoom << endl;
//
//}
//void GoodGay::visit2()
//{
//	cout << "visit2此时访问的是" << build->sittingRoom << endl;
//	//cout << "visit2此时访问的是" << build->bedRoom << endl;
//
//}
//
//
//void test01()
//{
//	GoodGay gg;
//	gg.visit1();
//	gg.visit2();
//}
////*************【注意】*************
////当成员函数做友元的时候，一定要把友元的类写在被访问私有权限区域的类的前面
//// ，并且在前面声明被访问类的名称
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}


////10.8日学习 运算重载符
////运算重载符的作用：编译器不能识别自定义的数据类型之间的相加
////此时我们可以通过成员函数或者全局函数来赋予这些操作
//#include <iostream>
//using namespace std;
//
//class person
//{
//public:
//	person(int a,int b):m_A(a),m_B(b)
//	{}
////今日1.利用成员函数进行重载加号
//	//person operator+(person &p) 
// // //operator+ 系统赋予的通用名称，这样不用再输入函数名称，直接使用加号即可。
//	//{
//	//	person temp(0,0);
//	//	temp.m_A = this->m_A + p.m_A;
//	//	temp.m_B = this->m_B + p.m_B;
//	//	return temp;//直接值传递返回，编译器会拷贝一份相同的。
//	//}
//	int m_A;
//	int m_B;
//};
//
////今日2.利用全局函数进行重载加号
//person operator+(person& p1, person& p2) //两者区别不大。
//{
//	person temp(0,0);
//	temp.m_A = p1.m_A + p2.m_A;
//	temp.m_B = p1.m_B + p2.m_B;
//	return temp;
//}
//
////今日3.不同数据类型之间的相加函数
//person operator+(person& p1, int num) //运算符重载也可以发生函数重载
////此处形参内部传入的是不同类型，和上面的不同。
//{
//	person temp(0, 0);
//	temp.m_A = p1.m_A + num;
//	temp.m_B = p1.m_B + num;
//	return temp;
//}
//
//
////我想做的是：可以实现person间的相加，使p1和p2的各个参数进行相加赋值给p3
//void test01()
//{
//	person p1(10,20);
//	person p2(10,20);
//	person p3 = p1 + p2;  //这是我想实现的步骤，但是此时显示没有符合要求的运算符
//	//operator+ 系统赋予的通用名称，这样不用再输入函数名称，直接使用加号即可。
//	//【1】成员函数的本质
//	/*person p3 =p1.operator+(p2);*/
//	//【2】全局函数的本质
//	//person p3 = operator+(p1, p2);
//
//	cout << "p3.m_A的值是" << p3.m_A<<  endl;
//	cout << "p3.m_B的值是" << p3.m_B << endl;
//	//运算符重载也可以允许函数重载
//	//比如我想让person和int类型相加
//	person p4 = p1 + 100;
//	cout << "p4.m_A的值是" << p4.m_A << endl;
//	cout << "p4.m_B的值是" << p4.m_B << endl;
//}
//int main()
//{
//	test01();
//	//总结【1】 对于内置的数据类型是无法更改的
//	
//	//总结【2】 不要滥用运算符重载
//
//	system("pause");
//	return 0;
//}

////今日4.左移运算符重载
////左移运算符重载只能用全局函数，局部函数不能让cout在<<的前侧
//#include <iostream>
//using namespace std;
//
//class person
//{
//	friend ostream& operator<<(ostream& cout, person& p);
//public:
//	person(int a, int b):m_A(a),m_B(b)
//	{}
//private:
//	int m_A;
//	int m_B;
//};
//
//ostream& operator<<(ostream &cout,person &p) //cout在整个系统中只有一个所以只能使用引用
//{
//	cout << "p.m_A =" << p.m_A << endl;
//	cout << "p.m_B =" << p.m_B << endl;
//	return cout;
//}
////该全局函数的本质是： operator<<(cout,p); 
////格式简化以后成了 cout << p ，打出这个指令后就会执行函数中的内容
//void test01()//我想做的是cout<<p直接能输出对象p下的所有元素
//{
//	person p(10, 20);
//	cout << p << endl ;//例如此步骤
//	//为了使用链式表达法，应该让cout<<p 返回到cout的形式 这样又能跟后面<<___ 进行配对
//}
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}


//10.11日学习
////今日1. 递增运算符重载
//#include <iostream>
//using namespace std;
////当两个自定义类型++或者--时，系统内置没有可应用的运算符，所以自己设置
//class Person
//{
//	friend ostream& operator<< (ostream &cout, Person& p);
//public:
//	Person(int age) :m_age(age) 
//	{}
//	Person& operator++()//前置++
//	{
//		m_age++;
//		return *this; //前置++返回类引用
//	}
//	int operator++(int)//后置++ 采用占位符与系统区分
//	{
//		//后置++应该利用临时值保存数值，然后本值递增，再返回递增前保存的临时数值
//		Person temp = *this;
//		m_age++;
//		return temp.m_age;  //后置++返回数值
//	}
//private:
//	int m_age;
//};
//
//ostream & operator<< (ostream &cout,Person &p)//函数用于直接输出类的成员
//{
//	cout << p.m_age ;
//	return cout;
//}
//
//void test01()
//{
//	Person p(18);
//	cout << "p 的数值是" << ++p << endl;
//	cout << "p 的数值是" <<  p  << endl;
//}
//
//void test02()
//{
//	Person p1(20);
//	cout << "p1 的数值是" << p1++ << endl;
//	cout << "p1 的数值是" << p1++ << endl;
//	cout << "p1 的数值是" << p1 << endl;
//
//}
//int main()
//{
//	//test01();
//	test02();
//	system("pause");
//	return 0;
//}
////递减运算符重载同理

////今日2. 赋值运算符重载
//#include <iostream>
//using namespace std;
//class person
//{
//	friend ostream& operator<<(ostream &cout, person& p);
//public:
//	person(int age):m_Age(age)
//	{	}
//	person& operator=(person &p)
//	{
//		m_Age = p.m_Age;
//		return *this; 
//	}
//private:
//	int m_Age;
//};
//
//ostream& operator<<(ostream &cout, person& p)
//{
//	cout << p.m_Age;
//	return cout;
//}
//void test01()
//{
//	person p1(18);
//	person p2(20);
//	person p3(30);
//	p1 = p2 = p3;//当连续进行赋值时，这就要求开始的赋值结果要返回出一个数值，以便后续赋值
//	//p1= ______(p2=p3 返回值)
//	cout << "p1 的年龄为："<< p1 << endl;
//}
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

////关系运算符重载 == !=
//#include <iostream>
//using namespace std;
//
//class person
//{
//	
//public:
//	person(string name,int age) :m_Name(name),m_Age(age)
//	{ }
//
//	bool operator==(person &p)
//	{
//		if (this->m_Age == p.m_Age && this->m_Name == p.m_Name)
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//	bool operator!=(person &p)
//	{
//		if (this->m_Age == p.m_Age && this->m_Name == p.m_Name)
//		{
//			return false;
//		}
//		else
//		{
//			return true;
//		}
//	}
//private:
//	string m_Name;
//	int m_Age;
//};
//
//void test01()
//{
//	person p1("xxs", 18);
//	person p2("王JY", 18);
//	person p3("xxs", 18);
//
//	if (p1 == p2)
//	{
//		cout << "p1 和 p2 是一样的" << endl;
//	}
//	else
//	{
//		cout << "p1 和 p2 是不一样的" << endl;
//	}
//	if (p1 == p3)
//	{
//		cout << "p1 和 p3 是一样的" << endl;
//	}
//	else
//	{
//		cout << "p1 和 p3 是不一样的" << endl;
//	}
//}
//
//void test02()
//{
//	person  p4("周YF",99);
//	person  p5("邳州王老丁", 98);
//	if (p4 != p5)
//	{
//		cout << "p4 和 p5 是不一样的" << endl;
//	}
//	else
//	{
//		cout << "p4 和 p5 是一样的" << endl;
//	}
//}
//int main()
//{
//	//test01();
//	test02();
//	system("pause");
//	return 0;
//}
