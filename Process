//9.16 学习C++
//#include<iostream>
//using namespace std;
//
//int main()
//{
//	cout << "hello world" << endl;
//	system("pause");
//
//	return 0;
//}
//2.创建变量
//#include <iostream>
//using namespace std;
//int main()
//{
//	int a = 10;
//	cout << "a=" << a << "\nb=20" << endl;   //a的值直接打印到句尾，如果想继续打印，
//	//那就需要再次<<并输入。
//	system("pause");
//
//	return 0;
//}
//3.常量
//常量的定义方式 （1）#define 宏常量  
//  （无法修改） （2）const修饰的常量
//#include<iostream>
//using namespace std;
////（1）.宏常量
//#define day 7
//int main()
//{
//	//Day=14;  Day是常量 不可修改
//	const int b = 31;//类型（2） const修饰的常量 
//	cout << "一周总共有" << day << "天" << endl; //cout打印出来后面自带隔行"\n"
//	cout << "一月份总共有" << b << "天\n" << endl;
//	system("pause");
//
//	return 0;
//}
#include <iostream>
using namespace std;
int main()
{
	//采用sizeof 计算数据类型所占的内存大小
	//int num1 = 1;
	//cout << "int 所占内存大小为：" << sizeof(num1)<<endl; //4
	//long num2 = 2;
	//cout << "long 所占内存大小为：" << sizeof(num2) << endl;//4或者8

	//科学计数法
	//float num3 = 3e2;   //3*10^2    300
	//float num4 = 5e-2;  //5*10^-2   0.05
	//cout << "num3=" << num3 << endl;
	//cout << "num4=" << num4 << endl;

	//字符型char
	//1.创建类型 
	char ch1 = 'A';
	cout << ch1 << endl;
	//2.常见的错误书写方式
	//（1）应该使用单引号 （2）单引号内只能放置一个字符，不能过多
	//3.字符变量所占内存大小
	cout << "char 所占内存大小为：" << sizeof(char) << endl; //1个
	//4.字符类型变量的内容，是利用ASCII值存放的
	cout << "A在ASCII值中对应为：" << (int)ch1 << endl; //ch1为字符，前置一个int为强制类型转换，显示内容所对应的ASCII码值
	//a为97 A为65
	cout << (char)97 << endl; //97数字化成字符型为a

	system("pause");
	return 0;
}


//9.17日学习
#include <iostream>
using namespace std;
#include <string> //2022版本中，此头文件可以不加。
int main()
{
	//今日1.水平制表符和输出斜杠
	/*cout << "aa\thello world" << endl;
	cout << "aaa\thello world" << endl;
	cout << "aaaa\thello world" << endl; //作用：便于整洁
	cout << "\\\\" << endl; */  //单独输入\时，不会输出\ 
	
	//今日2.字符串数据类型 
	//在C语言中 ，需要注意，要加[]，并且字符串需要用双引号
	/*char ch1[] = "hello";
	cout << ch1 << endl; *///此处输出时，不需要加[]，如果加了反而出错。但是[]内可加数字，从0开始。
	//在C++中 ，需要注意，引用字符串的头文件
	/*string ch2 = "world";
	cout << ch2 << endl;*/
	
	//今日3.布尔数据类型 bool
	//bool flag = true;  //不是必须输入true，非零即真。
	//cout << flag << endl;
	//flag = false;  //输入false或0时，为0
	//cout << flag << endl;
	/*cout << "bool 类型所占内存大小为" << sizeof(bool) << endl;  */

	//今日4.数据的输入 (cin >> 数据类型的名称 ) 类似C语言中的scanf
	//float num = 3.14f; //单浮点应该在后面加上f 避免自动转化成双浮点
	//cout << "请输入num的值：";
	//cin >> num;        
	//cout << "num的值为：" << num << endl;
	
	//今日5.运算符 (计算)(赋值)(比较)(逻辑)
	//double num1 = 3.33;
	//int num2 = 3;
	////double num3 = num1 / num2;   
	//cout << num1 / num2 << endl;   //若是INT除int类型，则会只出现整数部分，小数部分舍弃。
	/*int A = 3;
	int B = 2;
	cout << (float)A / B << endl;*/ //强制转换成float类型会显示除小数部分。

	//int a = 10;
	//int b = 0; //输出时使用括号体现优先级，先计算
	//cout<< !a<<endl;  //非   即 取反
	//cout << (a || b) << endl; //或门：全假为假，其余为真  1
	//cout << (a && b) << endl; //与门：全真为真，其余为假  0

	//今日6.选择结构 （1）if语句
	//用户输入分数，若分数大于600，则对学生进行祝贺
	//1.用户输入分数，2.打印用户分数，3.判断，若大于600，则祝贺考上一本,
	// 大于500，则二本，大于400，则三本，小于等于400，则未考上本科。
	//int Score = 0;
	//cout << "请输入您的分数：" ;
	//cin >> Score;
	//cout << "您的分数为：" << Score << endl;
	//if (Score > 600)  //注意事项：if条件后面不要加分号
	//{
	//	cout << "Congratulations!一本" << endl;
	//}
	//else if (Score > 500)  //此处不能写 600>S>500， 因为前端判断结束以后会变成0或者1
	//	//然后1或0肯定不大于500，则后侧判断就是错误的 需要注意！
	//{
	//	cout << "祝贺考上二本！" << endl;
	//}
	//else if (Score > 400)
	//{
	//	cout << "祝贺考上三本大学！" << endl;
	//}
	//else
	//{
	//	cout << "未考上大学，请再接再厉！" << endl;
	//}

	system("pause");
	return 0;
}

//9.18日学习 
#include <iostream>
using namespace std;

int main(){
	//今日1.if嵌套语句 
    //例子，600分以上1本，500分二本，400分三本，400以下未考本科。其中大于700北大，大于650清华
    //大于600则人大
	/*int score = 0;
	cout << "请输入您的分数：";
	cin >> score;
	cout << "您的分数为：" << score << endl;
	if (score > 600)
	{
		if (score > 700)
			cout << "恭喜您考上了北京大学！" << endl;
		else if(score>650)
			cout << "恭喜您考上了清华大学！" << endl;
		else
			cout << "恭喜您考上了人民大学！" << endl;
	}
	else if (score > 500)
	{
		cout << "恭喜您考上二本大学！" << endl;
	}
	else if (score > 400)
	{
		cout << "恭喜您考上三本大学！" << endl;

	}
	else
	{
		cout << "您未考上大学，请再接再厉！" << endl;
	}*/

	//今日2.练习题 三只小猪称体重，比较体重更大的
	/*int pig1 = 1;
	int pig2 = 2;
	int pig3 = 3;
	if (pig1 > pig2)
	{
		if(pig1>pig3)
		{cout << "第一只小猪更重。" << endl;}
		else
		{cout << "第三只小猪更重。" << endl;}
	}
	else
	{
		if(pig2>pig3)
		{cout << "第二只小猪更重。" << endl;}
		else
		{cout << "第三只小猪更重。" << endl; }
	}*/

	//今日3.三目操作符
	//创建三个变量ABC，将AB作比较，将较大值赋值给C
	//int a = 10;
	//int b = 20;
	//int c = 0;
	//a > b ? c = a : c = b;//   或者c=(a>b?a:b);
	//cout << "c=" << c << endl;
	////注意 三目操作符的结果是冒号两端的a或b ，我们可以再次给其赋值
	//(a > b ? a : b) = 100;



	system("pause");
	return 0;
}

//9.19日学习
#include <iostream>
#include <ctime>
using namespace std;

int main()
{
	//今日1. 多分支语句 switch case语句
	//例如：对一部电影进行评分，若9-10分为经典，7-8分为不错，7分以下为烂片。
	//cout << "请您对该电影进行评分(0-10)：";
	//int star = 0;
	//cin >> star;
	//cout << "您的评分是：" << star << endl;
	//switch (star)
	//{
	//case 10:
	//case 9:
	//{
	//	cout << "这是一部经典电影。" << endl;
	//	break;
	//}
 //   case 8:
	//case 7:
	//{
	//	cout << "这是一部不错的电影。" << endl;
	//	break;
	//}
	//default:
	//{
	//	cout << "这是一部烂片！" << endl;
	//	break;
	//}

	//}

	//今日2.循环结构 （1）while (判断条件){循环语句}
	//举例生成0-9的数字
	//int num = 0;
	//while (num < 10)
	//{
	//	cout << num++ << endl;
	//	if(5==num)
	//	{
	//		break; //break在单个循环中，直接跳出整个循环，不再进行循环判断。
	//	}
	//	else{}
	//}

	//while小练习，猜数字。
	//1.随机生成一个1-100的数字
	/*srand((unsigned int)time(NULL));
	int num = 1+rand() % 100;*///这种写法的范围是0-99,但是是伪随机数，需要加头文件。
	//2.进行猜测
	//3.猜大了，通知猜大了；猜小了，通知猜小了；然后让继续猜。
	//int guess = 0;
	//cout << "请猜测数字(0-100)：";
	//while(1)
	//{
	//	cin >> guess;
	//	if (guess > num)
	//	{
	//		cout << "猜大了，请再次输入：";
	//	}
	//	else if (guess < num)
	//	{
	//		cout << "猜小了，请再次输入:";
	//	}
	//	else
	//	{
	//		cout << "猜对了！";
	//		break;
	//	}
	//}

	//今日3. （2）do while循环
	//同样是打印0-9的数字
	/*int num = 0;
	do {
		cout << num++ << endl;
	} while (num < 10); */ //与while循环不同的点就是会先执行一次。

	//今日4.练习 寻找三位数的水仙花数，例如153=1^3+5^3+3^3
	//int num = 100;
	//int a, b, c = 0;
	//do {
	//	a = num / 100; //a为百位
	//	b = num / 10 % 10;//b为十位
	//	c = num % 10;//c为个位
	//	if (num == (a*a * a + b * b * b  + c * c * c))
	//		cout << num << "  ";
	//	num++;
	//} while (num < 1000);
	//cout << "是水仙花数。" << endl;

	//今日5.for 循环 for(初始表达式；循环条件；末尾循环体){ 循环语句}
	//打印0 - 9的数字
	/*for (int i = 0; i < 10; i++)
	{
		cout << i << " ";
	}*/

	//今日6嵌套循环 .小练习，做一个10×10的*阵
	//思路1.先做一行 2.再循环十次。
	//int j = 1;
	//for(int i=1;i<11;i++)
	//{
	//	for (; j < 11; j++)
	//	{
	//		if (5 == j)
	//			break;     //如果此时break跳出，是直接结束循环，不会进入末尾循环体！
	//		cout << "* ";
	//	}
	//	cout << j;
	//	cout << endl;
	//}
    //此处插播一条信息，如果在嵌套中加入break，会直接跳出距离最近的一个循环,例如上面。

    //今日7.练习 9×9乘法表
	//分析：整体是列×行的式子，并且行的数值是小于等于列的
	//for (int i = 1; i < 10; i++)
	//{
	//	for (int j = 1; j <= i; j++)
	//	{
	//		cout << i << "×" << j << "="<<i*j<<"\t"; //水平制表符用于整齐。
	//	}
	//	cout << endl;
	//}

	//今日8.跳转语句break的总结
	// （1）switch case语句中，case事件后加break 直接跳出，避免进行多余步骤。
	// （2）单个循环中，break直接跳出循环。
	// （3）嵌套循环中，break仅跳出当前最近的循环。
    //     【注】：在FOR循环中，break以后，末尾循环体不再进行
	
	//今日9.利用continue语句打印出1-100的奇数 
	//for (int i = 1; i < 101; i++)
	//{
	//	if(0==i%2)
	//	{
	//		continue;  //continue是跳出本次循环重新进入循环。
	//	}
	//	cout << i << " ";
	//}
	//【注】：continue跳出循环以后执行末尾循环体，进行i++，再进行判断。与break不同。

	system("pause");
	return 0;
}

//9.20日练习
#include <iostream>
using namespace std;

int main()
{
	//今日1.跳转语句 （3）go to语句 无条件跳转
	//例如按照顺序执行五句话，但是再途中插入个goto 则会立刻跳转走，不再继续执行后续操作。
	//cout << "1.***********" << endl;
	//cout << "2.***********" << endl;
	////如果我想从2直接跳转5，可以使用goto语句
	//goto FLAG;
	//cout << "3.***********" << endl;
	//cout << "4.***********" << endl;
	//FLAG:
	//cout << "5.***********" << endl;

	//今日2.数组
	//数组的特点：（1）数组中每个元素的数据类型都是一样的
	//（2）数组中每个元素所占领的内存位置是连续的。
	//创建方法三种
	//【1】数据类型 ID [数量]；
	//int arr[2];
	//arr[0] = 1;
	//arr[1] = 2; //数组中的元素可以赋值
	//cout << arr[0] << endl;
	//cout << arr[1] << endl;
	//【2】数据类型 ID[数量]={1，2，3，4}；
/*	int arr1[4] = { 1,2,3 };
	for(int i=0;i<4;i++)
	{
		cout << arr1[i] << endl;  
	}*///如果数组中的数量是设定的，且有未被赋值的，那么就会自动补0.
	//【3】数据类型 ID[]={1，2，3，4}；
/*	int arr2[] = { 1,2,3,4 };
	for(int j=0;j<5;j++)
	{
		cout << arr2[j] << endl;
	}*///如果输出时超出了位置，那就会出现随机数字。
	//【注意】：arr是常量，不可以被赋值！  例如arr=10，是错的。

	//今日3.小练习 在五个数字中间找到最大值。
	//【1】先建立五个数字
	//int arr[] = { 880,250, 660, 370, 290 };
	////【2】建立一个最大值的变量，挨个比较，如果大就将大的给变量赋值。
	//int max = 0;
	//for (int i = 0; i < 5; i++)
	//{
	//	if (max < arr[i])
	//		max = arr[i];
	//}
	//cout << "最大值为：" << max << endl;

	system("pause");
	return 0;
}



//9.21日练习
//#include <iostream>
//using namespace std;
//
//int main()
//{
//	//今日1.元素逆置 例如：将54231变成13245
//	//(1).建立一个数组承载数字
//	//int arr[] = {5,4,2,3,1};
//	//cout << "逆置前的数字：";
//	//for (int i = 0; i < 5; i++)
//	//{
//	//	cout << arr[i] << " ";
//	//}
//	////(2).建立循环让数字交换，需要一个中间变量。
//	//int start = 0;
//	//int end = sizeof(arr) / sizeof(arr[0])-1;//0-4
//	//while (start < end)
//	//{
//	//	int temp = 0;
//	//	temp = arr[start];
//	//	arr[start] = arr[end];
//	//	arr[end] =temp;
//	//	start++; end--;
//	//}
//	//cout << endl<< "逆置后的数字：";
//	//	for (int i = 0; i < 5; i++)
//	//{
//	//	cout << arr[i] << " ";
//	//}
//
//	//今日2.冒泡排序
//	//(1).建立一个乱的数组
//	//int arr[] = { 5,6,3,4,1,2 };
//	//int num = sizeof(arr) / sizeof(arr[0]);
//	////(2)循环次数为num-1，每次的排序次数为num-第几次循环（从0开始）-1
//	//for (int i =0; i < num-1; i++)
//	//{
//	//	for (int j=0;j<num-i-1;j++)
//	//	{
//	//		int temp = 0;
//	//		if (arr[j] > arr[j + 1])
//	//		{
//	//			temp = arr[j];
//	//			arr[j] = arr[j + 1];
//	//			arr[j + 1] = temp;
//	//		}
//	//	}
//	//}
//	//for(int m = 0; m < num;m++)
//	//{
//	//	cout << arr[m] << " " ;
//	//}
//
//	//今日3.二维数组  四种创建方式,不一一列举，列举两种。
//	//int arr1[3][3] = 
//	//{
//	//	{1,2,3},
//	//	{4,5,6}
//	//	未赋值的位置，自动补齐0
//	//};
//	//for (int i = 0; i < 3; i++)
//	//{
//	//	for (int j = 0; j < 3; j++)
//	//	{
//	//		cout << arr1[i][j] << " ";
//	//	}
//	//	cout << endl;
//	//}
//	//第二种。
//	//int arr2[][3] = { 1,2,3,4,5,6 }; //系统会自动分配行数。
//	////可以省略行数，但是列数不可以省略！
//
//	system("pause");
//	return 0;
//}

//今日4.函数,创建一个相加的函数。
//返回数据类型 函数名称（参数列表）
//{ 函数内容 ； return __表达式 }
//#include <iostream>
//using namespace std;
//
//int Add(int num1, int num2)
//{
//	int sum = num1 + num2;
//	return sum;
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c=Add(a, b);
//	cout << "a和b的和为：" << c << endl;
//	system("pause");
//	return 0;
//}

//今日5.形参的改变不会影响实参。
//#include <iostream>
//using namespace std;
//void swap(int num1, int num2)
//{
//	cout << "变换前num1的值：" << num1<<endl;
//	cout << "变换前num2的值：" << num2 << endl;
//	int temp = num1;
//	num1 = num2;
//	num2 = temp;
//	cout << "变换后num1的值：" << num1 << endl;
//	cout << "变换后num2的值：" << num2 << endl;
//}
//int main()
//{
//	int A = 10;
//	int B = 20;
//	swap(A, B);
//	cout << "A=" << A << endl;
//	cout << "B=" << B << endl;
//	system("pause");
//	return 0;
//}//由此可见，实参传入函数后，形参如何变换对原始的实参都没有影响。

//23.9.22日学习
//今日最终练习 封装一个函数，利用冒泡排序，实现对整型数组的升序排序。
#include <iostream>
using namespace std;

//冒泡排序       参数1：数组的首地址  参数2：数组的长度
void bubbleSort(int* arr,int len)
{
	int* p1 = arr;
	for (int i = 0; i < len-1; i++)
	{
		arr = p1;
		for (int j = 0; j < len-1 - i; j++)
		{
			if (*arr > *(arr + 1))
			{
				int temp =*arr;
				*arr = *(arr + 1);   //此处如果用 arr[j]=arr[j+1]也可以改变实参
				*(arr + 1) = temp; //因为在C++中传入数组的地址后，arr[j]=*(arr+j)
			}
			arr++;
		}
	}
}
int main()
{
	int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };
	//求出数组的长度，并传入函数。
	int len = sizeof(arr) / sizeof(arr[0]);
	bubbleSort(arr,len);
	for (int i = 0; i < 10; i++)
	{
		cout << arr[i] << " ";
	}
	cout << endl;

	system("pause");
	return 0;
}

//#include <iostream>
//using namespace std;
//
////冒泡排序       参数1：数组的首地址  参数2：数组的长度
//void bubbleSort(int* arr,int len)
//{
//	int* p1 = arr;
//	for (int i = 0; i < len-1; i++)
//	{
//		arr = p1;
//		for (int j = 0; j < len-1 - i; j++)
//		{
//			if (*arr > *(arr + 1))
//			{
//				int temp =*arr;
//				*arr = *(arr + 1);   //此处如果用 arr[j]=arr[j+1]也可以改变实参
//				*(arr + 1) = temp; //因为在C++中传入数组的地址后，arr[j]=*(arr+j)
//			}
//			arr++;
//		}
//	}
//}
//int main()
//{
//	int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };
//	//求出数组的长度，并传入函数。
//	int len = sizeof(arr) / sizeof(arr[0]);
//	bubbleSort(arr,len);
//	for (int i = 0; i < 10; i++)
//	{
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//
//	system("pause");
//	return 0;
//}


#include <iostream>
using namespace std;

int main()
{
	//今日1.函数的常见类型
	//【1】无参无返回值  //例如swap调换函数 
	// 【2】无参有返    //例如打印一系列的语句
	// 【3】有参有返    //一般函数如此
	// 【4】有参无返    //例如传地址进去，改变实参的数值。

	//今日2.函数分文件编写
	//作用：【1】表达清晰【2】方便合作
	//步骤：【1】创建一个函数的头文件.h
	// 【2】创建一个函数的源文件 .cpp
	// 【3】在头文件里输入函数的声明，一般还包括iostream头文件，普遍能用到
	// 【4】在源文件内输入函数的内容，并且包括头文件 #include"" 自己的文件用双引号

	//今日3.******指针*******
	//指针的作用是用于存储地址，可以通过地址找到变量。
	//【1】指针的定义：存储变量的数据类型  *  id =& 变量
	/*int a = 10;
	int* p = &a;
	cout << *p << endl;*/
	//使用解引用符号，可以通过地址找到变量

	//【2】指针的大小
	int a = 10;
	char b = 0;
	double c = 0;
	cout << sizeof(&a) << endl;
	cout << sizeof(&b) << endl;
	cout << sizeof(&c) << endl; 
	//指针内存储的是16进制的地址。尽管类型不同，但是大小都是相同的。

	system("pause");
	return 0;
}
