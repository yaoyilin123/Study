//今日23.9.23  结构体
//定义： struct ___（相当于自己创建的数据类型）  ___ID  { 成员列表};
//#include <iostream>
//using namespace std;
//struct student
//{
//	string name; //成员列表内记录学生的名字 年龄 成绩
//	int age;
//	int score;
//};
//
//void print(const student* stu)
//{
//	//stu->age = 0; //此时，stu的值是不可以修改的,避免了误操作
//}
//int main()
//{
//	student stu1 = { "小学生",18,100 };
//	cout << "学生的名字为："<< stu1.name <<" 学生的年龄为："<< stu1.age <<  endl;
//	//当想使用成员列表内的内容 可以用  名字.成员列表
//	student* point = &stu1;
//	cout << "学生的成绩为:" << point->score << endl;
//	//当使用指针存储结构体的地址时，若想调出使用，应该用 -> 符号 指向所需要的成员
//
//	//知识点：当传递结构体时，如果采用值传递，需要重新复制一份，会很耗费内存。
//	//所以我们应该采用地址传递。与此同时，为了避免在函数中误操作修改值，可以采用常量指针。
//	print(&stu1);
//	system("pause");
//	return 0;
//}

//结构体做参数函数
//#include <iostream>
//using namespace std;
//
//struct student
//{
//	string name;
//	int age;
//	int score;
//};
////1.值传递
//void print(student s)
//{
//	//若在此处修改形参的数值，对实参无影响。
//	cout << "学生的姓名：" << s.name << " 学生的年龄：" << s.age << " 学生的分数：" << s.score << endl;
//}
////2.地址传递
//void print1(student * p)
//{
//	//若在此处修改数值，寻址以后会修改实参。所以说应根据情况来选择使用。
//	cout << "学生的姓名：" << p->name << " 学生的年龄：" << p->age << " 学生的分数：" << p->score << endl;
//}
//int main()
//{
//	student s1 = { "小李",18,100 };
//	print(s1);//值传递打印
//	print1(&s1);//地址传递打印
//	system("pause");
//	return 0;
//}

////结构体案例1 
////总共有三个老师，每个老师带五个学生，请创建老师和学生的结构体，前者中有老师的名字和带的学生，后者中有学生名字和成绩
////然后再创建一个数组包含这三个老师，再用函数输入老师和学生的结构体内容，最后输出学生和老师的内容。
//#include <iostream>
//using namespace std;
//#include <ctime>
////1.分别创建老师和学生的结构体，包含各自的内容
//struct student {
//	string name;
//	int score;
//};
//struct teacher{
//	string name;
//	student stdarr[5];
//};
//
//void give(teacher tea[], int len)//函数传入数组的地址和长度
//{
//	srand((unsigned int)time(NULL));
//	string nameseed = "ABCDE";
//	for(int i=0;i<3;i++)
//	{
//		tea[i].name = "Teacher_";
//		tea[i].name += nameseed[i];
//		for (int j = 0; j < 5; j++)
//		{
//			tea[i].stdarr[j].name = "Student_";
//			tea[i].stdarr[j].name += nameseed[j];
//			tea[i].stdarr[j].score = rand()%61+40;// 0~60 +40 =40~100
//		}
//	}
//
//}
//void printInform(teacher tea[],int len)
//{
//	for(int i=0;i<len;i++)
//	{
//		cout << "第" << i+1 << "个老师的名字是:" << tea[i].name << endl;
//		for(int j=0;j<5;j++)
//		{
//			cout << "\t他的第" << j+1 << "个学生的名字是:" << tea[i].stdarr[j].name
//				<< "该学生的成绩是:" << tea[i].stdarr[j].score << endl;
//		}
//	}
//}
//int main()
//{
//	//2.创建数组存放三名老师
//	teacher tea[3];
//	int len = sizeof(tea) / sizeof(tea[0]);
//	//3.通过函数给每个老师和学生赋值
//	give(tea,len);
//	//4.打印出老师和学生分别的数据
//	printInform(tea,len);
//	system("pause");
//	return 0;
//}


//9.24日结构体练习
//利用冒泡排序对结构体数组排序。
#include <iostream>
//using namespace std;
////1.设计英雄的结构体 成员列表包括姓名年龄性别
//struct hero
//{
//	string name;
//	int age;
//	string sex;
//};
//void bubble(hero harr[], int len) //参数列表有 结构体数组的地址 数组的长度
//{
//	for (int i = 0; i < len-1; i++)
//	{
//		for (int j = 0; j < len - 1 - i; j++)
//		{
//			if (harr[j].age > harr[j + 1].age)
//			{
//				////[1]名字交换
//				//string Name = harr[j].name;
//				//harr[j].name = harr[j + 1].name;
//				//harr[j + 1].name = Name;
//				////[2]年龄交换
//				//int temp = harr[j].age;
//				//harr[j].age = harr[j + 1].age;
//				//harr[j + 1].age = temp;
//				////[3]性别交换
//				//string Sex = harr[j].sex;
//				//harr[j].sex = harr[j + 1].sex;
//				//harr[j + 1].sex = Sex;
//				//【4】此处也可以一次性传导
//				hero temp = harr[j];
//				harr[j] = harr[j + 1];
//				harr[j + 1] = temp;
//			}
//		}
//	}
//}
//void printH(hero harr[], int len)
//{
//	for (int i = 0; i < len;i++)
//	{
//		cout << "\t第"<<i+1 << "个英雄的名字是：" << harr[i].name << " 年龄是：" << harr[i].age
//			 << " 性别是：" << harr[i].sex << endl;
//	}
//}
//int main()
//{
//	//2.创建一个数组存放五名英雄
//	hero Harr[5] = {
//		{"刘备",23,"男"},
//		{"关羽",22,"男"},
//		{"张飞",20,"男"},
//		{"赵云",21,"男"},
//		{"貂蝉",19,"女"}
//	};
//	cout << "排序前的打印结果：" << endl;
//	int len = sizeof(Harr) / sizeof(Harr[0]);
//	printH(Harr, len);
//	//3.使用冒泡排序按照年龄做升序排序
//	bubble(Harr,len);
//	//cout << Harr[0].age << Harr[0].name << Harr[0].sex << endl;//检测一下冒泡排序的正确性
//	//4.使用函数打印排序后的结果
//	cout << "排序后的打印结果：" << endl;
//	printH(Harr,len);
//	system("pause");
//	return 0;
//}

//#include <iostream>
//using namespace std;
//
//void mySwap01(int& a, int& b)  //参数列表接收类似以下形式 int&a=a,int&b=b 
//								//引用的形式 可改变实参 id可以一样
//{
//	int temp = a;
//	a = b;
//	b = temp;
//}
//
//void printA(const int& a) //在此处加个const 将文件变成了只读状态，这样常量不能修改
//{
//	//a = 10;这种情况就会报错
//	cout << a << endl; 
//} 
//
//int& printb(int& a)
//{
//	a = 100;   //此处的a是形参 放在栈区，当函数运行结束后，系统会保留一次以后删除该内存上的内容
//	return a;  //所以应避免这样返回操作， 类同野指针。
//}
//int& ref()
//{
//	static int a = 20;
//	return a;
//}
//int main()
//{
//	//今日学习内容1.内存四区
//	//1.1 代码区  此区全是二进制的机器指令
//	//1.2 全局区  此处存放的是 全局变量(函数外声明的数据类型) 静态变量(static) 和常量 
//	//            其中常量包含的是全局常量(函数外声明的const+数据类型)和字符串常量("hello world")
//	//
//	// 1.3 栈区 由编译器控制，程序结束后自动删除。存放的是局部变量和函数的形参等
//	// 1.4 堆区 由程序员控制，可以利用new delete关键字控制
//	//栈区和堆区是在程序开始以后才开始出现
//	//堆区举例
//	//int * p=new int(0); //关键字new 数据类型 (数字的大小)； 
//	////在系统的堆区开辟了一块空间用于存储括号内的数字，该表达式整体的值是该空间的地址，所以用指针去接收
//	//cout << *p << endl;
//	//*p = 20;
//	//cout << *p << endl;//其中的数字也是可以修改的
//	////如果想开辟数组的话 格式是 关键字new 数据类型 [数组元素的个数]
//	//int* arr = new int[4];
//	//for(int i=0;i<4;i++)
//	//{
//	//	arr[i] =i;
//	//	cout << arr[i] << endl;
//	//}
//	//delete p;    //格式：  delete 接收内存空间的指针;
//	//delete arr;
//	////cout << *p << endl; 删除地址后，无法再访问。
//	////cout<<arr[0]<<endl;删除地址后，无法再访问。
//
//	//今日2.引用  用处：相当于给数据起了个别名
//	//2.1 定义 
//	//int a = 10; //开辟一块空间叫做a
//	//int& b = a;//给a的那块空间起个别名，叫做b 
//	//cout << "a=" << a << endl;
//	//cout << "b=" << b << endl;//所以通过b的名字 也可以去寻找那块空间
//	//b = 20;
//	//cout <<"a=" << a << endl;
//	//cout << "b=" << b << endl;
//	//int &b=10;  这种是错误的，右端应该是一块合法的空间。
//
//	//2.2注意：引用必须进行初始化，且初始化后，不可更改为别人的别名。
//
//	//2.3 利用引用可以代替指针使用。 也可以通过形参改变实参的数字
//	//int a = 0;
//	//int b = 1;
//	//mySwap01(a, b);
//	//cout << "a=" << a << " b=" << b << endl;
//
//	//2.4 引用的本质 其实就是指针变量  int* const p 可以修改p所对应的数值，但是不能修改地址。
//	//int a = 0;
//	//int& b = a;  //在编译器内部相当于 int * b=&a; 相当于把a的地址存放在了b的内部
//	//b = 10;//编译器在内部自动转换 该步骤等同于 *b=10 ,下同.
//	//cout << b << endl;
//	 
//	//2.5常量引用   //此处理解类同于结构体指针传递的时候 
//	//int a = 100;
//	//printA(a); //为了避免误操作修改实参，采用常量引用 也就是在形参内引用前加个const
//
//	//2.6引用做函数的返回值
//	//【1】不要返回局部变量
//	//int a = 0;
//	//int&b=printb(a);
//	//cout << "a=" << b << endl;
//	//【2】可以作为等号的左值
//	//int& a = ref();
//	//ref() = 50;  //相当于返回的是a值，可以对其进行赋值。
//	//cout <<a<< endl;
//	system("pause");
//	return 0;
//}

//今日9.25学习
//#include <iostream>
//using namespace std;
//
//void print(int a, int b, int c);//函数的声明
//
//void print(int a, int b = 10, int c = 0)  //此处的参数值是可以设定默认值的
//{                           //函数初始值设定有两个注意事项
//	cout << a + b << endl; //【1】设定初始值的位置，往后都要设定初始值，不能穿插在中间
//}							//【2】函数的声明和函数的定义不能同时在同一个参数位置上进行初始值设定
//
//void printA(int a, int) //此处的第二个形参并未声明名称，所以我们也不能找到他
//{
//	cout << a << endl;  //占位在目前用的不多。
//}
//void printZ(int& a)  //传入a等同于以下形式： int&a =a  
//{
//	cout << "这是printZ(int& a)的函数" << endl; 
//}
//void printZ(const int& a)  //传入10等于以下形式：  const int&a= 10； 这种形式是允许的
////由于const int& 和int&是不同的数据类型 所以满足重载条件
//{
//	cout << "这是printZ(const int& a)的函数" << endl;
//}
//int printL(int a)
//{
//	return a ;
//}
//int printL(int a, int b = 10)
//{
//	return a + b;
//}
//
//int main()
//{
//	//关于函数提高
//	//1.函数可以有默认参数值
///*	int a = 10;
//	int b = 20;
//	print(a,b);*/ //这种情况 如果传入数值，则按照传入数值运行函数，若未传，则按照默认值进行。
//	//2.函数的占位
//	//就像我用一个书包在图书馆的位置上占座，并未标记我的名字，但是有物品(数据类型)占领位置
//	//printA(10,20);
//	//3.函数的重载
//	//3.1作用：函数之间可以共用同一个名称
//	//         但是需要满足三个条件 【1】在同一个作用域之内
//				// 【2】函数名称相同
//	//			【3】传入的数据类型需要满足顺序不同、类型不同、或个数不同其中之一
//	//  
//	//3.2 在使用重载时需要注意的点：
//	//【1】return 返回值的类型不同  这一点不能作为满足重载的条件
//	//【2】在引用作为重载引用的条件时需要注意
//	//例如：
//	//int a = 10;
//	//printZ(a);//正常情况下，a也是可以传入const int&的数据类型中，
//	//printZ(10);//但是有这两种同时存在时，会进入int&a，而常量10直接进入const
//	//【3】函数设定初始值的情况下，应该避免使用重载，避免出现二义性
//	//例如以下
//	//printL(10); 该代码出现错误，是因为出现了二义性，两种printL的函数均可以进入，所以出错。
//	printL(10, 10);
//	system("pause");
//	return 0;
//}
//

//////封装第一课
////#include <iostream>
////using namespace std;
////
//////创建一个圆类 
//////封装的定义： class 类名 { 访问权限 属性 行为 };
//// //类中的属性和行为统称为成员
//// //属性 也叫做 成员属性 成员变量
//// //行为 也叫做 成员函数 成员方法 (术语)
////const double PI = 3.14;
////class circle
////{
////	//公开访问
////public: 
////	//属性 (创建属于这类东西的特性)
////	//比如圆类的半径
////	int R;
////	//行为（和这类东西的参数有关的函数）
////	//比如计算该圆类的周长
////	double cal()
////	{
////		return 2 * PI * R;
////	}
////};
////int main()
////{
////	//利用类名创建一个该类的对象
////	circle c1;
////	c1.R = 5;
////	cout << "半径为5的圆的周长为：" << c1.cal() << endl; //注意括号不要丢
////	system("pause");
////	return 0;
////}

////任务：设计一个学生类，属性有姓名和学号，可以给学生和学号赋值，
////                                       可以显示学生的姓名和学号。
//
//#include <iostream>
//using namespace std;
//
//class student
//{
//	//访问权限
//public:
//	//属性
//	string Name;
//	int stu_num;
//	//行为
//	//创建一个显示学生的姓名和学号的行为函数
//	void printS()
//	{
//		cout << "学生的姓名是：" << Name << " 学号是：" << stu_num << endl;;	
//	}
//	void setName(string name)
//	{
//		Name = name;
//	}
//	void setNum(int num)
//	{
//		stu_num = num;
//	}
//};
//
//int main() {
//	//给学生的参数赋值
//	student s1;//实例化对象
//	//s1.Name = "xiaoXuesheng";
//	//s1.stu_num = 20190724; //给属性赋值
//	s1.setName("xiaoxuesheng");
//	s1.setNum(20190724);
//	s1.printS();
//	student s2;
//	//s2.Name = "王JY";
//	//s2.stu_num = 20190811;
//	s2.setName("王JY");
//	s2.setNum(20190811);
//	s2.printS();
//
//	system("pause");
//	return 0;
//}


//9.26日学习内容 
#include <iostream>
using namespace std;
//今日1.访问权限的区别
// 【1】公开权限   成员 类内可以访问，类外也可以访问
// 【2】保护权限   成员 类内可以访问，类外不能访问
// 【3】私人权限   成员 类内可以访问，类外不能访问
// 保护权限和私人权限的区别会在继承时体现出来。
//创建一个人的类
class person
{
public://公开权限
	string m_Name;
protected://保护权限
	int age;
private://私人权限
	int password;
};

//今日2.class和struct的区别
//唯一区别就是默认的访问权限不同
class student {
	string s_Name;  //main函数中可见，未声明权限时，默认是私人权限
};
struct Student {
	string S_Name; //main函数中可见,struct默认是公开权限，类外也可以访问
};
int main()
{
	person p1;
	p1.m_Name = "xiaoXuesheng";
	//p1.age = 1; 此处的就会报错 因为类外是不可访问的
	//p1.password=100000; 同上。

	student stu;
	//stu.s_Name = "haha";是不可以访问的
	Student Stu;
	Stu.S_Name = "wang JY"; 
	system("pause");
	return 0;
}

////9.28日练习案例1
////设计一个立方体类（Cube），求出立方体的面积和体积。
////分别用全局函数和成员函数来判断两个立方体是否相等（相等即长宽高均相同）
//#include <iostream>
//using namespace std;
////1.设计一个立方体类
//class Cube
//{
//public:
//	//设置长
//	void setL(float l)
//	{
//		m_L = l;
//	}
//	//读取长
//	float getL()
//	{
//		return m_L;
//	}
//	//设置高
//	void setH(float h)
//	{
//		m_H = h;
//	}
//	//读取高
//	float getH()
//	{
//		return m_H;
//	}
//	//设置宽
//	void setW(float w)
//	{
//		m_W = w;
//	}
//	//读取宽
//	float getW()
//	{
//		return m_W;
//	}
//
//	float getMJ()//获得面积的成员函数
//	{
//		return ((m_L * m_W + m_L * m_H+ m_H*m_W) * 2);
//}
//	float getTJ()//获得体积的成员函数
//	{
//		return (m_L * m_W * m_H);
//	}
//
//	//3.利用成员函数来判断两个立方体是否相等。
//	void isSame(Cube& c)//引用传入节省空间
//	{
//		if (m_L == c.getL() && m_H == c.getH() && m_W == c.getW())
//		{
//			cout << "这两个立方体相等" << endl;
//		}
//		else{
//			cout << "这两个立方体不相等！" << endl;
//		}
//	}
//private:
//	float m_L;//设置长宽高
//	float m_W;
//	float m_H;
//};
//
////2.利用全局函数来判断两个立方体是否相等
//void Judge(Cube &c1, Cube &c2)  //引用传入 省空间
//{
//	if (c1.getL() == c2.getL() && c1.getH() == c2.getH() && c1.getW() == c2.getW())
//	{
//				cout << "c1和c2是两个相等的立方体" << endl;
//	}
//	else{
//		cout << "c1和c2是两个不相等的立方体" << endl;
//	}
//}
//
//int main()
//{
//	Cube c1;
//	c1.setL(10);
//	c1.setW(10);
//	c1.setH(10);
//	//cout << "c1的面积是"<<c1.getMJ() << endl;;
//	//cout << "c1的体积是" << c1.getTJ() << endl;
//	Cube c2;
//	c2.setL(10);
//	c2.setW(10);
//	c2.setH(10);
//	cout << "全局函数判断: ";
//	Judge(c1, c2);//全局函数判断
//	cout << "成员函数判断: ";
//	c1.isSame(c2);//类成员函数判断
//
//	system("pause");
//	return 0;
//}


//案例练习：判断点和圆的关系
//#include <iostream>
//using namespace std;
//#include "circle.h"
//#include "point1.h"
////创建一个圆类
////class circle
////{
////public:
////	//设置圆的横坐标
////	void setRx(int x)
////	{
////		Rx = x;
////	}
////	//获取圆的横坐标
////	int getRx()
////	{
////		return Rx;
////	}
////	//设置圆的纵坐标
////	void setRy(int y)
////	{
////		Ry = y;
////	}
////	//获取圆的纵坐标
////	int getRy()
////	{
////		return Ry;
////	}
////	//设置圆的半径
////	void setR(int r)
////	{
////		R = r;
////	}
////	//获取圆的半径
////	int getR()
////	{
////		return R;
////	}
////
////private:
////	int Rx;//圆心坐标
////	int Ry;
////	int R;//圆的半径
////};
////创建一个点类
////class point1 {
////public:
////	//设置横坐标
////	void setX(int x)
////	{
////		X = x;
////	}
////	//获取横坐标
////	int getX()
////	{
////		return X;
////	}
////	//设置纵坐标
////	void setY(int y)
////	{
////		Y = y;
////	}
////	//获取纵坐标
////	int getY()
////	{
////		return Y;
////	}
////private:
////	int X;//设置横纵坐标
////	int Y;
////};
//
////创建一个函数判断点是否在圆内
//void judge(circle & c,point1 & p) //将待判断的点传入
//{
//	unsigned int distance =((c.getRx() - p.getX())* (c.getRx() - p.getX()) + (c.getRy() - p.getY())* (c.getRy() - p.getY()));
//	int Rdistance = (c.getR()* c.getR());
//	if (distance> Rdistance)//外部点减去内部点的平方加在一起 和半径的平方相比较
//	{
//		cout << "点在圆外" << endl;
//	}
//	else if (distance < Rdistance)
//	{
//		cout << "点在圆内" << endl;
//	}
//	else
//	{
//		cout << "点在圆上" << endl;
//	}
//}
//
//int main()
//{
//	point1 p1; //实例化一个点
//	p1.setX(0); 
//	p1.setY(21);
//	circle c1;//实例化一个圆
//	c1.setRx(0);
//	c1.setRy(0);
//	c1.setR(20);
//	judge(c1,p1);
//	system("pause");
//	return 0;
//}
////学习分文件编写
